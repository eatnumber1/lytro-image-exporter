#!/bin/zsh
emulate zsh -L -o err_exit -o warn_create_global -o no_unset
#setopt xtrace
zmodload -F zsh/zutil +b:zparseopts
zmodload -F zsh/parameter +p:commands
zmodload -F zsh/files +b:rm +b:mv +b:mkdir
readonly PROGNAME=${0##*/}

typeset -i njobs
if (( ${+commands[nproc]} )); then
	njobs=$(nproc)
else
	njobs=$(sysctl -n hw.ncpu)
fi
(( njobs-- )) || :
typeset -r njobs

typeset -A optns
optns[--jobs]=$njobs
optns[--out-dir]=$PWD
zparseopts -K -E -A optns -D -M -- \
	-help h=-help \
	-verbose v=-verbose \
	-out-dir: o:=-out-dir \
	-calibration: c:=-calibration \
	-quiet q=-quiet \
	-jobs: j:=-jobs
typeset -r optns

function usage {
	local usage_fmt
	read -r -d '' usage_fmt <<-EOF || :
	Usage: $PROGNAME [OPTIONS] LFRS...

	Creates TIFF images from LFR files. The resulting TIFF files will have everything in the scene in focus and will
	correctly preserve EXIF data.

	Options:
	-c / --calibration CALIBRATION Path to the calibration data. See "cameratool pull-cal-data --help".
	-h / --help                    Print this help message
	-j / --jobs NJOBS              Process NJOBS LFRs in parallel. Default: $njobs (number of cores - 1)
	-o / --out-dir DIRECTORY       The directory to output the TIFF files to. Default: current directory
	-q / --quiet                   Suppress warning messages
	-v / --verbose                 Print additional messages
	EOF
	echo $usage_fmt
}

if (( ${+optns[--help]} )); then
	usage
	exit
fi

if (( ${+optns[--out-dir]} )); then
	if [[ -e ${optns[--out-dir]} ]]; then
		if [[ ! -d ${optns[--out-dir]} ]]; then
			print -u2 "Error: --out-dir (${optns[--out-dir]}) must be a directory"
			usage >&2
			exit 1
		fi
	else
		mkdir ${optns[--out-dir]}
	fi
fi

if [[ $# -eq 0 ]]; then
	print -u2 "Error: No LFRs specified"
	usage >&2
	exit 1
fi

function set_lfp_vars {
	local lfp=${1:a}
	local lfp_filename=${lfp##*/}
	lfp_fn=${lfp_filename%.*}
	lfp_ext=${lfp_filename##*.}
	lfp_dir=${lfp%/*}

	# The presence of a file that has a similar name to the input lfp will
	# cause lfptool to output files named ${lfp%.lfp}_lfp_*.json.
	# Otherwise, it would output files named ${lfp%.lfp}_*.json
	# See lpt/lfp/tntcommon.py:359 (function _split_path) in the
	# lytro_power_tools 1.0.1b0 source.
	typeset -a similar
	setopt extendedglob
	similar=( "$lfp_dir/${lfp_fn}".(*~"$lfp_ext")(N) )
	if [[ ${#similar} -ne 0 ]]; then
		lfp_out_fn=${lfp_fn}_${lfp_ext}
	else
		lfp_out_fn=${lfp_fn}
	fi
}

typeset -a lfp_files
lfp_files=( "$@" )
typeset -r lfp_files

# Detect identically named files since we'll barf on those.
() {
	local lfp1 lfp2 lfp1_fn lfp2_fn
	local lfp_fn lfp_ext lfp_dir lfp_out_fn
	for lfp1 in $lfp_files; do
		set_lfp_vars $lfp1
		lfp1_fn=${lfp_fn}
		for lfp2 in $lfp_files; do
			if [[ $lfp1 == $lfp2 ]]; then
				continue
			fi
			set_lfp_vars $lfp2
			lfp2_fn=${lfp_fn}
			if [[ $lfp1_fn == $lfp2_fn ]]; then
				print -u2 "Error: Identically named files \"$lfp1\" and \"$lfp2\" cannot be processed simultaneously."
				exit 1
			fi
		done
	done
}

if (( ! ${+optns[--calibration]} && ! ${+optns[--quiet]} )); then
	print -u2 "Warning: No calibration data provided"
fi

# The maximum non-infinity single-precision floating point value.
typeset -rF focus_spread=2147483647

TMPDIR=$(mktemp -d -t $PROGNAME.XXXXXXXXX)
readonly TMPDIR
function cleanup {
	typeset -i ret=$?
	rm -rf $TMPDIR
	return $ret
}
trap cleanup ZERR EXIT INT HUP TERM

function run {
	setopt local_options
	if (( ${+optns[--verbose]} )); then
		setopt xtrace
	fi
	"$@"
}

function lfptool {
	local subcommand="$1"
	shift
	typeset -a lfptool_optns
	lfptool_optns+=( "$@" )
	if (( ${+optns[--calibration]} )); then
		lfptool_optns+=( --calibration-in ${optns[--calibration]} )
	fi

	typeset -a cmd
	cmd=( run command lfptool $subcommand $lfptool_optns )
	if (( ${+optns[--verbose]} )); then
		$cmd
	else
		$cmd > /dev/null
	fi
}

function recipetool {
	typeset -a cmd
	cmd=( run command recipetool "$@" )
	if (( ${+optns[--verbose]} )); then
		$cmd
	else
		$cmd > /dev/null
	fi
}

function exiftool {
	typeset -a exif_optns exif_added_optns
	if (( ${+optns[--verbose]} )); then
		exif_added_optns+=( -v )
	else
		exif_added_optns+=( -q )
	fi
	local opt
	for opt in "$@"; do
		if [[ $opt == -execute ]]; then
			exif_optns+=( $exif_added_optns )
		fi
		exif_optns+=( $opt )
	done
	exif_optns+=( $exif_added_optns )
	run command exiftool "${exif_optns[@]}"
}

function process_lfp {
	#setopt xtrace
	local lfp=$1
	local lfp_fn lfp_ext lfp_dir lfp_out_fn
	set_lfp_vars $lfp
	local recipe_file=$TMPDIR/${lfp_out_fn}_recipe.json

	if (( ! ${+optns[--quiet]} )); then
		echo "Processing $lfp"
	fi

	# Create a recipe
	lfptool raw --lfp-in $lfp --recipe-out --dir-out $TMPDIR

	# Modify the recipe to have maximum focus spread
	recipetool view -i $recipe_file --focus-spread $focus_spread

	# Output the image
	lfptool raw --lfp-in $lfp --recipe-in $recipe_file --dir-out $TMPDIR --image-out --threads 2

	local image_file=$TMPDIR/${lfp_out_fn}.tiff

	# Losslessly compress the image
	tiffcp -c lzw:2:p9 $image_file $image_file.new

	mv $image_file.new $image_file
}

emulate zsh -L -o err_exit -o warn_create_global -o no_unset -c 'function inside_zargs_do {
	# Need to reset traps inside of zargs. ZSH is supposed to do this automatically. Probably a ZSH bug.
	trap - ZERR EXIT HUP INT TERM
	"$@"
}'
emulate -R zsh -c 'autoload -Uz zargs'
() {
	setopt local_traps
	# zargs doesn't support ZERR traps correctly
	trap - ZERR
	zargs -n2 -P${optns[--jobs]} -- $lfp_files -- inside_zargs_do process_lfp
}

# Copy the EXIF data from the LFRs to the TIFFs
if (( ! ${+optns[--quiet]} )); then
	echo "Processing EXIF data"
fi
() {
	typeset -a exiftool_optns
	local lfp
	local lfp_fn lfp_ext lfp_dir lfp_out_fn
	for lfp in $lfp_files; do
		set_lfp_vars $lfp
		exiftool_optns+=( -tagsFromFile $lfp -ext TIFF $TMPDIR/$lfp_out_fn.tiff -execute )
	done
	exiftool $exiftool_optns
}

# Now let's fix up the filenames
() {
	local lfp
	local lfp_fn lfp_ext lfp_dir lfp_out_fn
	for lfp in $lfp_files; do
		set_lfp_vars $lfp
		if [[ $lfp_out_fn == $lfp_fn ]]; then
			continue
		fi
		mv $TMPDIR/$lfp_out_fn.tiff $TMPDIR/$lfp_fn.tiff
	done
}

mv $TMPDIR/*.tiff ${optns[--out-dir]}

# vim:ft=zsh
